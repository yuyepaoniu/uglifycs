//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UglifyCS.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UglifyCS.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*jslint onevar: false, plusplus: false */
        ////*
        ///
        ///JS Beautifier
        ///---------------
        ///
        ///
        ///Written by Einar Lielmanis, &lt;einar@jsbeautifier.org&gt;
        ///http://jsbeautifier.org/
        ///
        ///Originally converted to javascript by Vital, &lt;vital76@gmail.com&gt;
        ///
        ///You are free to use this in any way you want, in case you find this useful or working for you.
        ///
        ///Usage:
        ///js_beautify(js_source_text);
        ///js_beautify(js_source_text, options);
        ///
        ///The options are:
        ///indent_size (default 4)          â€” indentation size,
        ///indent_char (default spac [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string beautify {
            get {
                return ResourceManager.GetString("beautify", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var document = {
        ///    byid: {},
        ///    nodeType: 9,
        ///    getElementById: function(id){ return this.byid[id]; },
        ///    getElementsByTagName: function(name){
        ///      return this.body.getElementsByTagName(name);
        ///    },
        ///    addEventListener: function(){ },
        ///    removeEventListener: function(){ },
        ///    createElement: function(tag){
        ///      return new fragment(tag);
        ///    },
        ///    createComment: function(){ return {} }    
        ///  },
        ///  window = this,
        ///  navigator = { userAgent: &apos;Mozilla/5.0&apos;};
        ///
        ///function fragment (nodeNa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string browser {
            get {
                return ResourceManager.GetString("browser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * CoffeeScript Compiler v1.0.1
        /// * http://coffeescript.org
        /// *
        /// * Copyright 2011, Jeremy Ashkenas
        /// * Released under the MIT License
        /// */
        ///this.CoffeeScript=function(){function require(a){return require[a]}require[&quot;./helpers&quot;]=new function(){var a=this;(function(){var b,c;a.starts=function(a,b,c){return b===a.substr(c,b.length)},a.ends=function(a,b,c){var d;d=b.length;return b===a.substr(a.length-d-(c||0),d)},a.compact=function(a){var b,c,d,e;e=[];for(c=0,d=a.length;c&lt;d;c++)b=a[c],b&amp;&amp;e.push(b);return e},a.c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string coffee_script {
            get {
                return ResourceManager.GetString("coffee_script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 
        ///CSSLint
        ///Copyright (c) 2011 Nicole Sullivan and Nicholas C. Zakas. All rights reserved.
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining a copy
        ///of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///in the Software without restriction, including without limitation the rights
        ///to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///copies of the Software, and to permit persons to whom the Software is
        ///furnished to do so, subject to the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string csslint {
            get {
                return ResourceManager.GetString("csslint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var window = {},  require = (function () {
        ///    var exported = {};
        ///    var files = {};
        ///
        ///    return function (file) {
        ///        file = getFullFilename(file);
        ///        var key = file.toLowerCase();
        ///
        ///        if (files[key]) {
        ///            return exported[key];
        ///        }
        ///
        ///        var js = getContents(file);
        ///        var func = new Function(&apos;var exports = {}; &apos; + js + &apos;; return exports;&apos;);
        ///
        ///        files[key] = true;
        ///        return exported[key] = func();
        ///    }
        ///})();.
        /// </summary>
        internal static string env {
            get {
                return ResourceManager.GetString("env", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///* JSHint, by JSHint Community.
        ///*
        ///* Licensed under the same slightly modified MIT license that JSLint is.
        ///* It stops evil-doers everywhere.
        ///*
        ///* JSHint is a derivative work of JSLint:
        ///*
        ///*   Copyright (c) 2002 Douglas Crockford  (www.JSLint.com)
        ///*
        ///*   Permission is hereby granted, free of charge, to any person obtaining
        ///*   a copy of this software and associated documentation files (the &quot;Software&quot;),
        ///*   to deal in the Software without restriction, including without limitation
        ///*   the rights to  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jshint {
            get {
                return ResourceManager.GetString("jshint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * @fileoverview
        /// * jsUnitCore.js contains the implementation of the core JsUnit functionality: assertions, JsUnitTestSuites, and JsUnit.Failure.
        /// * An HTML page is considered to be a JsUnit Test Page if it &quot;includes&quot; jsUnitCore.js, i.e. the following line is present:
        /// * &lt;code&gt;
        /// * &amp;lt;script type=&quot;text/javascript&quot; src=&quot;/path/to/jsUnitCore.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
        /// * &lt;/code&gt;
        /// * @author Edward Hieatt, edward@jsunit.net, http://www.jsunit.net
        /// */
        ///
        ///var JsUnit = {};
        ///
        ////**
        /// * The JsUnit version
        /// * @version
        /// */
        ///J [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jsUnitCore {
            get {
                return ResourceManager.GetString("jsUnitCore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /***********************************************************************
        ///
        ///A JavaScript tokenizer / parser / beautifier / compressor.
        ///
        ///This version is suitable for Node.js.  With minimal changes (the
        ///exports stuff) it should work on any JS platform.
        ///
        ///This file contains the tokenizer/parser.  It is a port to JavaScript
        ///of parse-js [1], a JavaScript parser library written in Common Lisp
        ///by Marijn Haverbeke.  Thank you Marijn!
        ///
        ///[1] http://marijn.haverbeke.nl/parse-js/
        ///
        ///Exported functions:
        ///
        ///- toke [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string parse_js {
            get {
                return ResourceManager.GetString("parse_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /***********************************************************************
        ///
        ///A JavaScript tokenizer / parser / beautifier / compressor.
        ///
        ///This version is suitable for Node.js.  With minimal changes (the
        ///exports stuff) it should work on any JS platform.
        ///
        ///This file implements some AST processors.  They work on data built
        ///by parse-js.
        ///
        ///Exported functions:
        ///
        ///- ast_mangle(ast, include_toplevel) -- mangles the
        ///variable/function names in the AST.  Returns an AST.  Pass true
        ///as second argument to mangle to [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string process {
            get {
                return ResourceManager.GetString("process", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var jsp = require(&quot;./parse-js&quot;),
        ///    pro = require(&quot;./process&quot;),
        ///    slice = jsp.slice,
        ///    member = jsp.member,
        ///    PRECEDENCE = jsp.PRECEDENCE,
        ///    OPERATORS = jsp.OPERATORS;
        ///
        ///function ast_squeeze_more(ast) {
        ///    var w = pro.ast_walker(), walk = w.walk;
        ///    return w.with_walkers({
        ///        &quot;call&quot;: function (expr, args) {
        ///            if (expr[0] == &quot;dot&quot; &amp;&amp; expr[2] == &quot;toString&quot; &amp;&amp; args.length == 0) {
        ///                // foo.toString()  ==&gt;  foo+&quot;&quot;
        ///                return [&quot;binary&quot;, &quot;+&quot;, expr[1], [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string squeeze_more {
            get {
                return ResourceManager.GetString("squeeze_more", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exports.parser = require(&quot;./parse-js&quot;);
        ///exports.uglify = require(&quot;./process&quot;);
        ///.
        /// </summary>
        internal static string uglify_js {
            get {
                return ResourceManager.GetString("uglify_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //#! /usr/bin/env node
        ///// -*- js2 -*-
        ///
        ///var uglify = require(&quot;uglify-js&quot;), // symlink ~/.node_libraries/uglify-js.js to ../uglify-js.js
        ///    jsp = uglify.parser,
        ///    pro = uglify.uglify;
        ///
        ///pro.set_logger(function(msg){
        ///        sys.debug(msg);
        ///});
        ///
        ///var options = {
        ///        ast: false,
        ///        mangle: true,
        ///        mangle_toplevel: false,
        ///        squeeze: true,
        ///        make_seqs: true,
        ///        dead_code: true,
        ///        beautify: false,
        ///        verbose: false,
        ///        show_copyright: true,
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string uglifyjs {
            get {
                return ResourceManager.GetString("uglifyjs", resourceCulture);
            }
        }
    }
}
